# assignment:
## Write a program to read through the mbox-short.txt and figure out the
## distribution by hour of the day for each of the messages. You can pull the
## hour out from the 'From ' line by finding the time and then splitting the string
## a second time using a colon.
#
## From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
#
##Once you have accumulated the counts for each hour, print out the counts,
##sorted by hour as shown below.

# desired output:
# 04 3
# 06 1
# 07 1
# 09 2
# 10 3
# 11 6
# 14 1
# 15 2
# 16 4
# 17 2
# 18 1
# 19 1

# this needs to be done WITHOUT using regex

# given code for a quick way to enter the file name
name = input("Enter file:")
if len(name) < 1:
    name = "mbox-short.txt"
handle = open(name)

# my code
counts = dict() # create a dictionary to fill 

# create a for loop to iterate through the file reading it line by line
for line in handle:

# a good step is to remove extra whitespace
.rstrip() # strip whitespace

# only look at emails that were received:
startswith('From ')

# split the lines into words
.split() 

# this program requires students to not use regex, fortunately the lines are short and we can easily grab the 6th word in the line
words[5]

# the 6th word is a time stamp in the form 00:00:00
# need to split that word by the colon
.split(':') 

# here we can grab the hour mark (the first time), count it, then store the information in the pre-defined dictionary
if hours[0] in counts:
     counts[hours[0]] = counts.get(hours[0],0) + 1
else:
     counts[hours[0]] = 1 # grab each hour mark and count them
     
# the dictionary needs to be sorted by the keys, from smallest to largest
# (I don't believe anyone would mind sharing this great, simple, code)
sorted([(k,v) for k,v in counts.items()]) # temporary tuple

# Need to store this sort in a temporary variable and then print the result
for (k,v) in [temporary_variable]:
    print(k,v)
